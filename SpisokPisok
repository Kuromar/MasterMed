using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections;


public class Node<T>
{
    public Node(T data)
    {
        Data = data;
    }
    public T Data { get; set; }
    public Node<T> Next { get; set; }
}

namespace SpisokPisok
{
   public class LinkedList<T> : IEnumerable<T>
    {
        Node<T> head;
        Node<T> tail;
        int count;

        //add 
        public void Add(T data)
        {
            Node<T> node = new Node<T>(data);

            if (head == null)
                head = node;
            else
                tail.Next = node;
            tail = node;
            count++;
        }
        //delete
        public bool Remove (T data)
        {
            Node<T> current = head;
            Node<T> previous = null;

            while(current != null)
            {
                if (current.Data.Equals(data))
                {
                    //Если узел в середине или конце
                    if (previous != null)
                    {
                        //Убираем узел current, теперь previous ссылается не на curent, а на current.Next
                        previous.Next = current.Next;

                        //Если current.Next не установлен, значит узел последний, 
                        // Изменяем переменную tail
                        if (current.Next == null)
                            tail = previous;
                    }
                    else
                    {
                        //Если удаляется первывый элемент 
                        // Переустанавливаем значение head
                        head = head.Next;

                        //Если после удаления список пуст, сбрасываем tail
                        if (head == null)
                            tail = null;
                       
                    }
                    count--;
                    return true;
                }
                previous = current;
                current = current.Next;
            }
            return false;
        }
        //Содержит ли список элемент
        public bool Contains (T data)
        {
            Node<T> current = head;
            while (current != null)
            {
                if (current.Data.Equals(data))
                    return true;
                current = current.Next;
            }
            return false;
        }
        //Добавляем в начало
        public void AppendFirst(T data)
        {
            Node<T> node = new Node<T>(data);
            node.Next = head;
            head = node;
            if (count == 0)
                tail = head;
            count++;
        }
        //Реализация интерфейса IEnumetable
        IEnumerator IEnumerable.GetEnumerator()
        {
            return ((IEnumerable)this).GetEnumerator();
        }
        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            Node<T> current = head;
            while(current != null)
            {
                yield return current.Data;
                current = current.Next;
            }
        }
    }
    public class Program
    {
        static void Main()
        {
            LinkedList<string> kys = new LinkedList<string>();
            kys.Add("Tom");
            kys.Add("Elly");
            kys.Add("Johnatan");
            kys.Add("Alice");
            foreach(var item in kys)
            {
                Console.WriteLine(item);
            }
            kys.Remove("Alice");
            foreach(var item in kys)
            {
                Console.WriteLine(item);
            }
            bool isPresent = kys.Contains("Sam");
            Console.WriteLine(isPresent == true ? "Sam is here" : "Sam isnt here");
            kys.AppendFirst("First");
            foreach(var item in kys)
            {
                Console.WriteLine(item);
            }
        }   
    }
}
